import React from "react";
import { Text } from "@consta/uikit/Text";

const Spech = () => {
  return (
    <Text size="l" view="primary" className="list-grid">
      В нашем решении использована гибридная архитектура, позволяющая гибко
      извлекать необходимые данные из на нескольких уровнях: из произносимой
      речи на видео, из фоновой звуковой дорожки, из происходящего на видео, из
      пользовательского описания видео. Совокупность этих данных у нас
      векторизуется, и с помощью поиска по векторной базе мы предоставляем ТОП
      самых подходящих под описание запроса видео. Более того наша архитектура
      позволяет конфигурировать веса важности вышеописанных данных и
      использовать LLM с помощью RAG (контекстные запросы) чтобы находить видео
      еще на более глубоком уровне. Гипотеза что бы ты еще сделал с поиском но
      не успел в рамках хака Произвели бы оптимизации как на уровне индексации
      так и на уровне поиска с учетом архитектуры прода и возможностей железа.
      При наличии данных о поисковых запросах мы бы обучили и добавили n-gram
      модель для автокомплита вводимых запросов пользователей и исправления
      ошибок в неверно печатаемых словах. Помимо этого мы бы добавили on-device
      модель Whisper для поиска видео с помощью транскрибации голосовых запросов
      в текст. Преимущества нашего решения Мы используем извлечение уникальных
      кадров, которые описываем с помощью мультимодальной языковой модели, чтобы
      понять что происходит на видео, даже если в нем нет описания, тегов и не
      произносится речь и нет фоновых звуков. Гибкость системы позволяет
      управлять количеством уникальных фреймов и порогом уникальности, размером
      окна ответа LLM, использовать разные модальности. Векторная база позволяет
      оптимизировать хранение проиндексированных данных и ускорять по ним поиск.
      Описание основных алгоритмов и моделей машинного обучения -Алгоритмы
      хэширования для определения уникальности фреймов -Мультимодальную языковую
      модель -Алгоритмы векторизации -RAG Описание инструментов/языков
      программирования/ библиотек/ опен сорс решений использованных в работе -
      На беке Python, FastAPI, Celery, ChromaDB for servers - На фронте ReactJS
      Скорость работы - Скорость индексации ~5 секунд на видео до 1 минуты в
      одном потоке - Скорость поиска ~0.5 секунды на топ 10 видео Указания
      уникальности решений - Мы подошли к вопросу извлечения данных для поиска
      основательно и используем самый глубокий из возможных подходов, который
      даёт глубокое понимание о происходящем на видео и позволяет его найти,
      даже если по нему нет информации от пользователя. Мы учли баланс между
      скоростью индексирования и скоростью поиска.
    </Text>
  );
};

export default Spech;
